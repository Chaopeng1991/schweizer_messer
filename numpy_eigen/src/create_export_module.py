#!/bin/python

#dims = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','Eigen::Dynamic']
dims = ['1','2','3','4','5','6','Eigen::Dynamic']
#types = ['char','short','int','long','unsigned char', 'unsigned short', 'unsigned int', 'unsigned long', 'float', 'double', 'std::complex<float>','std::complex<double>']
types = ['int', 'float', 'double']
#types = ['double']



with open('numpy_eigen_export_module.cpp','w') as f:
    f.write('#include "NumpyEigenConverter.hpp"\n\n')
    f.write('// This file automatically generated by create_export_module.py\n')
    f.write('BOOST_PYTHON_MODULE(libnumpy_eigen)\n')
    f.write('{\n')
    f.write('\tusing namespace boost::python;\n')
    f.write('\timport_array();\n');
    f.write('\n');
    for d1 in dims:
        for d2 in dims:
            for T in types:
                f.write('\t  NumpyEigenConverter<Eigen::Matrix< %s, %s, %s > >::register_converter();\n' % (T,d1,d2))
                f.write('\n')
                
    f.write('\n')
    f.write('}\n')
    f.write('\n')



with open('numpy_eigen_test_module.cpp','w') as f:
    f.write('// This file automatically generated by create_export_module.py\n')
    f.write('#include <Eigen/Core>\n')
    f.write('#include <boost/python.hpp>\n')
    f.write('\n')
    for d1 in dims:
        for d2 in dims:
            for T in types:
                td1 = d1
                if td1 == 'Eigen::Dynamic':
                    td1 = 'dynamic'
                td2 = d2
                if td2 == 'Eigen::Dynamic':
                    td2 = 'dynamic'
                f.write('Eigen::Matrix<%s, %s, %s> test_%s_%s_%s(const Eigen::Matrix<%s, %s, %s> & M)\n' % (T,d1,d2,T,td1,td2,T,d1,d2))
                f.write('{\n')
                f.write('\treturn M;\n')
                f.write('}')
                f.write('\n')

    f.write('BOOST_PYTHON_MODULE(libnumpy_eigen_test)\n')
    f.write('{\n')
    f.write('\tusing namespace boost::python;\n')
    f.write('\n');
    for d1 in dims:
        for d2 in dims:
            for T in types:
                td1 = d1
                if td1 == 'Eigen::Dynamic':
                    td1 = 'dynamic'
                td2 = d2
                if td2 == 'Eigen::Dynamic':
                    td2 = 'dynamic'
                f.write('\tdef("test_%s_%s_%s",test_%s_%s_%s);\n' % (T,td1,td2,T,td1,td2))
                 
    f.write('\n')
    f.write('}\n')
    f.write('\n')

