// This file automatically generated by create_export_module.py
#include <Eigen/Core>
//#include <boost/python.hpp>
#include <numpy_eigen/boost_python_headers.hpp>

Eigen::Matrix<int, 1, 1> test_int_1_1( Eigen::Matrix<int, 1, 1>  M)
{
	return M;
}
Eigen::Matrix<float, 1, 1> test_float_1_1(const Eigen::Matrix<float, 1, 1> & M)
{
	return M;
}
Eigen::Matrix<double, 1, 1> test_double_1_1(const Eigen::Matrix<double, 1, 1> & M)
{
	return M;
}
Eigen::Matrix<int, 1, 2> test_int_1_2(const Eigen::Matrix<int, 1, 2> & M)
{
	return M;
}
Eigen::Matrix<float, 1, 2> test_float_1_2(const Eigen::Matrix<float, 1, 2> & M)
{
	return M;
}
Eigen::Matrix<double, 1, 2> test_double_1_2(const Eigen::Matrix<double, 1, 2> & M)
{
	return M;
}
Eigen::Matrix<int, 1, 3> test_int_1_3(const Eigen::Matrix<int, 1, 3> & M)
{
	return M;
}
Eigen::Matrix<float, 1, 3> test_float_1_3(const Eigen::Matrix<float, 1, 3> & M)
{
	return M;
}
Eigen::Matrix<double, 1, 3> test_double_1_3(const Eigen::Matrix<double, 1, 3> & M)
{
	return M;
}
Eigen::Matrix<int, 1, 4> test_int_1_4(const Eigen::Matrix<int, 1, 4> & M)
{
	return M;
}
Eigen::Matrix<float, 1, 4> test_float_1_4(const Eigen::Matrix<float, 1, 4> & M)
{
	return M;
}
Eigen::Matrix<double, 1, 4> test_double_1_4(const Eigen::Matrix<double, 1, 4> & M)
{
	return M;
}
Eigen::Matrix<int, 1, 5> test_int_1_5(const Eigen::Matrix<int, 1, 5> & M)
{
	return M;
}
Eigen::Matrix<float, 1, 5> test_float_1_5(const Eigen::Matrix<float, 1, 5> & M)
{
	return M;
}
Eigen::Matrix<double, 1, 5> test_double_1_5(const Eigen::Matrix<double, 1, 5> & M)
{
	return M;
}
Eigen::Matrix<int, 1, 6> test_int_1_6(const Eigen::Matrix<int, 1, 6> & M)
{
	return M;
}
Eigen::Matrix<float, 1, 6> test_float_1_6(const Eigen::Matrix<float, 1, 6> & M)
{
	return M;
}
Eigen::Matrix<double, 1, 6> test_double_1_6(const Eigen::Matrix<double, 1, 6> & M)
{
	return M;
}
Eigen::Matrix<int, 1, Eigen::Dynamic> test_int_1_dynamic(const Eigen::Matrix<int, 1, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<float, 1, Eigen::Dynamic> test_float_1_dynamic(const Eigen::Matrix<float, 1, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<double, 1, Eigen::Dynamic> test_double_1_dynamic(const Eigen::Matrix<double, 1, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<int, 2, 1> test_int_2_1(const Eigen::Matrix<int, 2, 1> & M)
{
	return M;
}
Eigen::Matrix<float, 2, 1> test_float_2_1(const Eigen::Matrix<float, 2, 1> & M)
{
	return M;
}
Eigen::Matrix<double, 2, 1> test_double_2_1(const Eigen::Matrix<double, 2, 1> & M)
{
	return M;
}
Eigen::Matrix<int, 2, 2> test_int_2_2(const Eigen::Matrix<int, 2, 2> & M)
{
	return M;
}
Eigen::Matrix<float, 2, 2> test_float_2_2(const Eigen::Matrix<float, 2, 2> & M)
{
	return M;
}
Eigen::Matrix<double, 2, 2> test_double_2_2(const Eigen::Matrix<double, 2, 2> & M)
{
	return M;
}
Eigen::Matrix<int, 2, 3> test_int_2_3(const Eigen::Matrix<int, 2, 3> & M)
{
	return M;
}
Eigen::Matrix<float, 2, 3> test_float_2_3(const Eigen::Matrix<float, 2, 3> & M)
{
	return M;
}
Eigen::Matrix<double, 2, 3> test_double_2_3(const Eigen::Matrix<double, 2, 3> & M)
{
	return M;
}
Eigen::Matrix<int, 2, 4> test_int_2_4(const Eigen::Matrix<int, 2, 4> & M)
{
	return M;
}
Eigen::Matrix<float, 2, 4> test_float_2_4(const Eigen::Matrix<float, 2, 4> & M)
{
	return M;
}
Eigen::Matrix<double, 2, 4> test_double_2_4(const Eigen::Matrix<double, 2, 4> & M)
{
	return M;
}
Eigen::Matrix<int, 2, 5> test_int_2_5(const Eigen::Matrix<int, 2, 5> & M)
{
	return M;
}
Eigen::Matrix<float, 2, 5> test_float_2_5(const Eigen::Matrix<float, 2, 5> & M)
{
	return M;
}
Eigen::Matrix<double, 2, 5> test_double_2_5(const Eigen::Matrix<double, 2, 5> & M)
{
	return M;
}
Eigen::Matrix<int, 2, 6> test_int_2_6(const Eigen::Matrix<int, 2, 6> & M)
{
	return M;
}
Eigen::Matrix<float, 2, 6> test_float_2_6(const Eigen::Matrix<float, 2, 6> & M)
{
	return M;
}
Eigen::Matrix<double, 2, 6> test_double_2_6(const Eigen::Matrix<double, 2, 6> & M)
{
	return M;
}
Eigen::Matrix<int, 2, Eigen::Dynamic> test_int_2_dynamic(const Eigen::Matrix<int, 2, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<float, 2, Eigen::Dynamic> test_float_2_dynamic(const Eigen::Matrix<float, 2, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<double, 2, Eigen::Dynamic> test_double_2_dynamic(const Eigen::Matrix<double, 2, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<int, 3, 1> test_int_3_1(const Eigen::Matrix<int, 3, 1> & M)
{
	return M;
}
Eigen::Matrix<float, 3, 1> test_float_3_1(const Eigen::Matrix<float, 3, 1> & M)
{
	return M;
}
Eigen::Matrix<double, 3, 1> test_double_3_1(const Eigen::Matrix<double, 3, 1> & M)
{
	return M;
}
Eigen::Matrix<int, 3, 2> test_int_3_2(const Eigen::Matrix<int, 3, 2> & M)
{
	return M;
}
Eigen::Matrix<float, 3, 2> test_float_3_2(const Eigen::Matrix<float, 3, 2> & M)
{
	return M;
}
Eigen::Matrix<double, 3, 2> test_double_3_2(const Eigen::Matrix<double, 3, 2> & M)
{
	return M;
}
Eigen::Matrix<int, 3, 3> test_int_3_3(const Eigen::Matrix<int, 3, 3> & M)
{
	return M;
}
Eigen::Matrix<float, 3, 3> test_float_3_3(const Eigen::Matrix<float, 3, 3> & M)
{
	return M;
}
Eigen::Matrix<double, 3, 3> test_double_3_3(const Eigen::Matrix<double, 3, 3> & M)
{
	return M;
}
Eigen::Matrix<int, 3, 4> test_int_3_4(const Eigen::Matrix<int, 3, 4> & M)
{
	return M;
}
Eigen::Matrix<float, 3, 4> test_float_3_4(const Eigen::Matrix<float, 3, 4> & M)
{
	return M;
}
Eigen::Matrix<double, 3, 4> test_double_3_4(const Eigen::Matrix<double, 3, 4> & M)
{
	return M;
}
Eigen::Matrix<int, 3, 5> test_int_3_5(const Eigen::Matrix<int, 3, 5> & M)
{
	return M;
}
Eigen::Matrix<float, 3, 5> test_float_3_5(const Eigen::Matrix<float, 3, 5> & M)
{
	return M;
}
Eigen::Matrix<double, 3, 5> test_double_3_5(const Eigen::Matrix<double, 3, 5> & M)
{
	return M;
}
Eigen::Matrix<int, 3, 6> test_int_3_6(const Eigen::Matrix<int, 3, 6> & M)
{
	return M;
}
Eigen::Matrix<float, 3, 6> test_float_3_6(const Eigen::Matrix<float, 3, 6> & M)
{
	return M;
}
Eigen::Matrix<double, 3, 6> test_double_3_6(const Eigen::Matrix<double, 3, 6> & M)
{
	return M;
}
Eigen::Matrix<int, 3, Eigen::Dynamic> test_int_3_dynamic(const Eigen::Matrix<int, 3, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<float, 3, Eigen::Dynamic> test_float_3_dynamic(const Eigen::Matrix<float, 3, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<double, 3, Eigen::Dynamic> test_double_3_dynamic(const Eigen::Matrix<double, 3, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<int, 4, 1> test_int_4_1(const Eigen::Matrix<int, 4, 1> & M)
{
	return M;
}
Eigen::Matrix<float, 4, 1> test_float_4_1(const Eigen::Matrix<float, 4, 1> & M)
{
	return M;
}
Eigen::Matrix<double, 4, 1> test_double_4_1(const Eigen::Matrix<double, 4, 1> & M)
{
	return M;
}
Eigen::Matrix<int, 4, 2> test_int_4_2(const Eigen::Matrix<int, 4, 2> & M)
{
	return M;
}
Eigen::Matrix<float, 4, 2> test_float_4_2(const Eigen::Matrix<float, 4, 2> & M)
{
	return M;
}
Eigen::Matrix<double, 4, 2> test_double_4_2(const Eigen::Matrix<double, 4, 2> & M)
{
	return M;
}
Eigen::Matrix<int, 4, 3> test_int_4_3(const Eigen::Matrix<int, 4, 3> & M)
{
	return M;
}
Eigen::Matrix<float, 4, 3> test_float_4_3(const Eigen::Matrix<float, 4, 3> & M)
{
	return M;
}
Eigen::Matrix<double, 4, 3> test_double_4_3(const Eigen::Matrix<double, 4, 3> & M)
{
	return M;
}
Eigen::Matrix<int, 4, 4> test_int_4_4(const Eigen::Matrix<int, 4, 4> & M)
{
	return M;
}
Eigen::Matrix<float, 4, 4> test_float_4_4(const Eigen::Matrix<float, 4, 4> & M)
{
	return M;
}
Eigen::Matrix<double, 4, 4> test_double_4_4(const Eigen::Matrix<double, 4, 4> & M)
{
	return M;
}
Eigen::Matrix<int, 4, 5> test_int_4_5(const Eigen::Matrix<int, 4, 5> & M)
{
	return M;
}
Eigen::Matrix<float, 4, 5> test_float_4_5(const Eigen::Matrix<float, 4, 5> & M)
{
	return M;
}
Eigen::Matrix<double, 4, 5> test_double_4_5(const Eigen::Matrix<double, 4, 5> & M)
{
	return M;
}
Eigen::Matrix<int, 4, 6> test_int_4_6(const Eigen::Matrix<int, 4, 6> & M)
{
	return M;
}
Eigen::Matrix<float, 4, 6> test_float_4_6(const Eigen::Matrix<float, 4, 6> & M)
{
	return M;
}
Eigen::Matrix<double, 4, 6> test_double_4_6(const Eigen::Matrix<double, 4, 6> & M)
{
	return M;
}
Eigen::Matrix<int, 4, Eigen::Dynamic> test_int_4_dynamic(const Eigen::Matrix<int, 4, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<float, 4, Eigen::Dynamic> test_float_4_dynamic(const Eigen::Matrix<float, 4, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<double, 4, Eigen::Dynamic> test_double_4_dynamic(const Eigen::Matrix<double, 4, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<int, 5, 1> test_int_5_1(const Eigen::Matrix<int, 5, 1> & M)
{
	return M;
}
Eigen::Matrix<float, 5, 1> test_float_5_1(const Eigen::Matrix<float, 5, 1> & M)
{
	return M;
}
Eigen::Matrix<double, 5, 1> test_double_5_1(const Eigen::Matrix<double, 5, 1> & M)
{
	return M;
}
Eigen::Matrix<int, 5, 2> test_int_5_2(const Eigen::Matrix<int, 5, 2> & M)
{
	return M;
}
Eigen::Matrix<float, 5, 2> test_float_5_2(const Eigen::Matrix<float, 5, 2> & M)
{
	return M;
}
Eigen::Matrix<double, 5, 2> test_double_5_2(const Eigen::Matrix<double, 5, 2> & M)
{
	return M;
}
Eigen::Matrix<int, 5, 3> test_int_5_3(const Eigen::Matrix<int, 5, 3> & M)
{
	return M;
}
Eigen::Matrix<float, 5, 3> test_float_5_3(const Eigen::Matrix<float, 5, 3> & M)
{
	return M;
}
Eigen::Matrix<double, 5, 3> test_double_5_3(const Eigen::Matrix<double, 5, 3> & M)
{
	return M;
}
Eigen::Matrix<int, 5, 4> test_int_5_4(const Eigen::Matrix<int, 5, 4> & M)
{
	return M;
}
Eigen::Matrix<float, 5, 4> test_float_5_4(const Eigen::Matrix<float, 5, 4> & M)
{
	return M;
}
Eigen::Matrix<double, 5, 4> test_double_5_4(const Eigen::Matrix<double, 5, 4> & M)
{
	return M;
}
Eigen::Matrix<int, 5, 5> test_int_5_5(const Eigen::Matrix<int, 5, 5> & M)
{
	return M;
}
Eigen::Matrix<float, 5, 5> test_float_5_5(const Eigen::Matrix<float, 5, 5> & M)
{
	return M;
}
Eigen::Matrix<double, 5, 5> test_double_5_5(const Eigen::Matrix<double, 5, 5> & M)
{
	return M;
}
Eigen::Matrix<int, 5, 6> test_int_5_6(const Eigen::Matrix<int, 5, 6> & M)
{
	return M;
}
Eigen::Matrix<float, 5, 6> test_float_5_6(const Eigen::Matrix<float, 5, 6> & M)
{
	return M;
}
Eigen::Matrix<double, 5, 6> test_double_5_6(const Eigen::Matrix<double, 5, 6> & M)
{
	return M;
}
Eigen::Matrix<int, 5, Eigen::Dynamic> test_int_5_dynamic(const Eigen::Matrix<int, 5, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<float, 5, Eigen::Dynamic> test_float_5_dynamic(const Eigen::Matrix<float, 5, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<double, 5, Eigen::Dynamic> test_double_5_dynamic(const Eigen::Matrix<double, 5, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<int, 6, 1> test_int_6_1(const Eigen::Matrix<int, 6, 1> & M)
{
	return M;
}
Eigen::Matrix<float, 6, 1> test_float_6_1(const Eigen::Matrix<float, 6, 1> & M)
{
	return M;
}
Eigen::Matrix<double, 6, 1> test_double_6_1(const Eigen::Matrix<double, 6, 1> & M)
{
	return M;
}
Eigen::Matrix<int, 6, 2> test_int_6_2(const Eigen::Matrix<int, 6, 2> & M)
{
	return M;
}
Eigen::Matrix<float, 6, 2> test_float_6_2(const Eigen::Matrix<float, 6, 2> & M)
{
	return M;
}
Eigen::Matrix<double, 6, 2> test_double_6_2(const Eigen::Matrix<double, 6, 2> & M)
{
	return M;
}
Eigen::Matrix<int, 6, 3> test_int_6_3(const Eigen::Matrix<int, 6, 3> & M)
{
	return M;
}
Eigen::Matrix<float, 6, 3> test_float_6_3(const Eigen::Matrix<float, 6, 3> & M)
{
	return M;
}
Eigen::Matrix<double, 6, 3> test_double_6_3(const Eigen::Matrix<double, 6, 3> & M)
{
	return M;
}
Eigen::Matrix<int, 6, 4> test_int_6_4(const Eigen::Matrix<int, 6, 4> & M)
{
	return M;
}
Eigen::Matrix<float, 6, 4> test_float_6_4(const Eigen::Matrix<float, 6, 4> & M)
{
	return M;
}
Eigen::Matrix<double, 6, 4> test_double_6_4(const Eigen::Matrix<double, 6, 4> & M)
{
	return M;
}
Eigen::Matrix<int, 6, 5> test_int_6_5(const Eigen::Matrix<int, 6, 5> & M)
{
	return M;
}
Eigen::Matrix<float, 6, 5> test_float_6_5(const Eigen::Matrix<float, 6, 5> & M)
{
	return M;
}
Eigen::Matrix<double, 6, 5> test_double_6_5(const Eigen::Matrix<double, 6, 5> & M)
{
	return M;
}
Eigen::Matrix<int, 6, 6> test_int_6_6(const Eigen::Matrix<int, 6, 6> & M)
{
	return M;
}
Eigen::Matrix<float, 6, 6> test_float_6_6(const Eigen::Matrix<float, 6, 6> & M)
{
	return M;
}
Eigen::Matrix<double, 6, 6> test_double_6_6(const Eigen::Matrix<double, 6, 6> & M)
{
	return M;
}
Eigen::Matrix<int, 6, Eigen::Dynamic> test_int_6_dynamic(const Eigen::Matrix<int, 6, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<float, 6, Eigen::Dynamic> test_float_6_dynamic(const Eigen::Matrix<float, 6, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<double, 6, Eigen::Dynamic> test_double_6_dynamic(const Eigen::Matrix<double, 6, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<int, Eigen::Dynamic, 1> test_int_dynamic_1(const Eigen::Matrix<int, Eigen::Dynamic, 1> & M)
{
	return M;
}
Eigen::Matrix<float, Eigen::Dynamic, 1> test_float_dynamic_1(const Eigen::Matrix<float, Eigen::Dynamic, 1> & M)
{
	return M;
}
Eigen::Matrix<double, Eigen::Dynamic, 1> test_double_dynamic_1(const Eigen::Matrix<double, Eigen::Dynamic, 1> & M)
{
	return M;
}
Eigen::Matrix<int, Eigen::Dynamic, 2> test_int_dynamic_2(const Eigen::Matrix<int, Eigen::Dynamic, 2> & M)
{
	return M;
}
Eigen::Matrix<float, Eigen::Dynamic, 2> test_float_dynamic_2(const Eigen::Matrix<float, Eigen::Dynamic, 2> & M)
{
	return M;
}
Eigen::Matrix<double, Eigen::Dynamic, 2> test_double_dynamic_2(const Eigen::Matrix<double, Eigen::Dynamic, 2> & M)
{
	return M;
}
Eigen::Matrix<int, Eigen::Dynamic, 3> test_int_dynamic_3(const Eigen::Matrix<int, Eigen::Dynamic, 3> & M)
{
	return M;
}
Eigen::Matrix<float, Eigen::Dynamic, 3> test_float_dynamic_3(const Eigen::Matrix<float, Eigen::Dynamic, 3> & M)
{
	return M;
}
Eigen::Matrix<double, Eigen::Dynamic, 3> test_double_dynamic_3(const Eigen::Matrix<double, Eigen::Dynamic, 3> & M)
{
	return M;
}
Eigen::Matrix<int, Eigen::Dynamic, 4> test_int_dynamic_4(const Eigen::Matrix<int, Eigen::Dynamic, 4> & M)
{
	return M;
}
Eigen::Matrix<float, Eigen::Dynamic, 4> test_float_dynamic_4(const Eigen::Matrix<float, Eigen::Dynamic, 4> & M)
{
	return M;
}
Eigen::Matrix<double, Eigen::Dynamic, 4> test_double_dynamic_4(const Eigen::Matrix<double, Eigen::Dynamic, 4> & M)
{
	return M;
}
Eigen::Matrix<int, Eigen::Dynamic, 5> test_int_dynamic_5(const Eigen::Matrix<int, Eigen::Dynamic, 5> & M)
{
	return M;
}
Eigen::Matrix<float, Eigen::Dynamic, 5> test_float_dynamic_5(const Eigen::Matrix<float, Eigen::Dynamic, 5> & M)
{
	return M;
}
Eigen::Matrix<double, Eigen::Dynamic, 5> test_double_dynamic_5(const Eigen::Matrix<double, Eigen::Dynamic, 5> & M)
{
	return M;
}
Eigen::Matrix<int, Eigen::Dynamic, 6> test_int_dynamic_6(const Eigen::Matrix<int, Eigen::Dynamic, 6> & M)
{
	return M;
}
Eigen::Matrix<float, Eigen::Dynamic, 6> test_float_dynamic_6(const Eigen::Matrix<float, Eigen::Dynamic, 6> & M)
{
	return M;
}
Eigen::Matrix<double, Eigen::Dynamic, 6> test_double_dynamic_6(const Eigen::Matrix<double, Eigen::Dynamic, 6> & M)
{
	return M;
}
Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> test_int_dynamic_dynamic(const Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<float, Eigen::Dynamic, Eigen::Dynamic> test_float_dynamic_dynamic(const Eigen::Matrix<float, Eigen::Dynamic, Eigen::Dynamic> & M)
{
	return M;
}
Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> test_double_dynamic_dynamic(const Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> & M)
{
	return M;
}
BOOST_PYTHON_MODULE(libnumpy_eigen_test)
{
	using namespace boost::python;

	def("test_int_1_1",test_int_1_1);
	def("test_float_1_1",test_float_1_1);
	def("test_double_1_1",test_double_1_1);
	def("test_int_1_2",test_int_1_2);
	def("test_float_1_2",test_float_1_2);
	def("test_double_1_2",test_double_1_2);
	def("test_int_1_3",test_int_1_3);
	def("test_float_1_3",test_float_1_3);
	def("test_double_1_3",test_double_1_3);
	def("test_int_1_4",test_int_1_4);
	def("test_float_1_4",test_float_1_4);
	def("test_double_1_4",test_double_1_4);
	def("test_int_1_5",test_int_1_5);
	def("test_float_1_5",test_float_1_5);
	def("test_double_1_5",test_double_1_5);
	def("test_int_1_6",test_int_1_6);
	def("test_float_1_6",test_float_1_6);
	def("test_double_1_6",test_double_1_6);
	def("test_int_1_dynamic",test_int_1_dynamic);
	def("test_float_1_dynamic",test_float_1_dynamic);
	def("test_double_1_dynamic",test_double_1_dynamic);
	def("test_int_2_1",test_int_2_1);
	def("test_float_2_1",test_float_2_1);
	def("test_double_2_1",test_double_2_1);
	def("test_int_2_2",test_int_2_2);
	def("test_float_2_2",test_float_2_2);
	def("test_double_2_2",test_double_2_2);
	def("test_int_2_3",test_int_2_3);
	def("test_float_2_3",test_float_2_3);
	def("test_double_2_3",test_double_2_3);
	def("test_int_2_4",test_int_2_4);
	def("test_float_2_4",test_float_2_4);
	def("test_double_2_4",test_double_2_4);
	def("test_int_2_5",test_int_2_5);
	def("test_float_2_5",test_float_2_5);
	def("test_double_2_5",test_double_2_5);
	def("test_int_2_6",test_int_2_6);
	def("test_float_2_6",test_float_2_6);
	def("test_double_2_6",test_double_2_6);
	def("test_int_2_dynamic",test_int_2_dynamic);
	def("test_float_2_dynamic",test_float_2_dynamic);
	def("test_double_2_dynamic",test_double_2_dynamic);
	def("test_int_3_1",test_int_3_1);
	def("test_float_3_1",test_float_3_1);
	def("test_double_3_1",test_double_3_1);
	def("test_int_3_2",test_int_3_2);
	def("test_float_3_2",test_float_3_2);
	def("test_double_3_2",test_double_3_2);
	def("test_int_3_3",test_int_3_3);
	def("test_float_3_3",test_float_3_3);
	def("test_double_3_3",test_double_3_3);
	def("test_int_3_4",test_int_3_4);
	def("test_float_3_4",test_float_3_4);
	def("test_double_3_4",test_double_3_4);
	def("test_int_3_5",test_int_3_5);
	def("test_float_3_5",test_float_3_5);
	def("test_double_3_5",test_double_3_5);
	def("test_int_3_6",test_int_3_6);
	def("test_float_3_6",test_float_3_6);
	def("test_double_3_6",test_double_3_6);
	def("test_int_3_dynamic",test_int_3_dynamic);
	def("test_float_3_dynamic",test_float_3_dynamic);
	def("test_double_3_dynamic",test_double_3_dynamic);
	def("test_int_4_1",test_int_4_1);
	def("test_float_4_1",test_float_4_1);
	def("test_double_4_1",test_double_4_1);
	def("test_int_4_2",test_int_4_2);
	def("test_float_4_2",test_float_4_2);
	def("test_double_4_2",test_double_4_2);
	def("test_int_4_3",test_int_4_3);
	def("test_float_4_3",test_float_4_3);
	def("test_double_4_3",test_double_4_3);
	def("test_int_4_4",test_int_4_4);
	def("test_float_4_4",test_float_4_4);
	def("test_double_4_4",test_double_4_4);
	def("test_int_4_5",test_int_4_5);
	def("test_float_4_5",test_float_4_5);
	def("test_double_4_5",test_double_4_5);
	def("test_int_4_6",test_int_4_6);
	def("test_float_4_6",test_float_4_6);
	def("test_double_4_6",test_double_4_6);
	def("test_int_4_dynamic",test_int_4_dynamic);
	def("test_float_4_dynamic",test_float_4_dynamic);
	def("test_double_4_dynamic",test_double_4_dynamic);
	def("test_int_5_1",test_int_5_1);
	def("test_float_5_1",test_float_5_1);
	def("test_double_5_1",test_double_5_1);
	def("test_int_5_2",test_int_5_2);
	def("test_float_5_2",test_float_5_2);
	def("test_double_5_2",test_double_5_2);
	def("test_int_5_3",test_int_5_3);
	def("test_float_5_3",test_float_5_3);
	def("test_double_5_3",test_double_5_3);
	def("test_int_5_4",test_int_5_4);
	def("test_float_5_4",test_float_5_4);
	def("test_double_5_4",test_double_5_4);
	def("test_int_5_5",test_int_5_5);
	def("test_float_5_5",test_float_5_5);
	def("test_double_5_5",test_double_5_5);
	def("test_int_5_6",test_int_5_6);
	def("test_float_5_6",test_float_5_6);
	def("test_double_5_6",test_double_5_6);
	def("test_int_5_dynamic",test_int_5_dynamic);
	def("test_float_5_dynamic",test_float_5_dynamic);
	def("test_double_5_dynamic",test_double_5_dynamic);
	def("test_int_6_1",test_int_6_1);
	def("test_float_6_1",test_float_6_1);
	def("test_double_6_1",test_double_6_1);
	def("test_int_6_2",test_int_6_2);
	def("test_float_6_2",test_float_6_2);
	def("test_double_6_2",test_double_6_2);
	def("test_int_6_3",test_int_6_3);
	def("test_float_6_3",test_float_6_3);
	def("test_double_6_3",test_double_6_3);
	def("test_int_6_4",test_int_6_4);
	def("test_float_6_4",test_float_6_4);
	def("test_double_6_4",test_double_6_4);
	def("test_int_6_5",test_int_6_5);
	def("test_float_6_5",test_float_6_5);
	def("test_double_6_5",test_double_6_5);
	def("test_int_6_6",test_int_6_6);
	def("test_float_6_6",test_float_6_6);
	def("test_double_6_6",test_double_6_6);
	def("test_int_6_dynamic",test_int_6_dynamic);
	def("test_float_6_dynamic",test_float_6_dynamic);
	def("test_double_6_dynamic",test_double_6_dynamic);
	def("test_int_dynamic_1",test_int_dynamic_1);
	def("test_float_dynamic_1",test_float_dynamic_1);
	def("test_double_dynamic_1",test_double_dynamic_1);
	def("test_int_dynamic_2",test_int_dynamic_2);
	def("test_float_dynamic_2",test_float_dynamic_2);
	def("test_double_dynamic_2",test_double_dynamic_2);
	def("test_int_dynamic_3",test_int_dynamic_3);
	def("test_float_dynamic_3",test_float_dynamic_3);
	def("test_double_dynamic_3",test_double_dynamic_3);
	def("test_int_dynamic_4",test_int_dynamic_4);
	def("test_float_dynamic_4",test_float_dynamic_4);
	def("test_double_dynamic_4",test_double_dynamic_4);
	def("test_int_dynamic_5",test_int_dynamic_5);
	def("test_float_dynamic_5",test_float_dynamic_5);
	def("test_double_dynamic_5",test_double_dynamic_5);
	def("test_int_dynamic_6",test_int_dynamic_6);
	def("test_float_dynamic_6",test_float_dynamic_6);
	def("test_double_dynamic_6",test_double_dynamic_6);
	def("test_int_dynamic_dynamic",test_int_dynamic_dynamic);
	def("test_float_dynamic_dynamic",test_float_dynamic_dynamic);
	def("test_double_dynamic_dynamic",test_double_dynamic_dynamic);

}

